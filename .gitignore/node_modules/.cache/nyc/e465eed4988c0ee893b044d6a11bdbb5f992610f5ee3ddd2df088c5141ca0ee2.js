var cov_eio3rtosq=function(){var path="/home/safdab/Documents/esir2/mdi/tpJxt/tp5/routes/users-v1.js";var hash="c2577152e94f2f2e0927048ce6ad1e7049dff891";var Function=function(){}.constructor;var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/home/safdab/Documents/esir2/mdi/tpJxt/tp5/routes/users-v1.js",statementMap:{"0":{start:{line:1,column:16},end:{line:1,column:34}},"1":{start:{line:2,column:15},end:{line:2,column:31}},"2":{start:{line:4,column:17},end:{line:4,column:26}},"3":{start:{line:7,column:0},end:{line:15,column:2}},"4":{start:{line:9,column:2},end:{line:13,column:3}},"5":{start:{line:14,column:2},end:{line:14,column:8}},"6":{start:{line:18,column:0},end:{line:44,column:2}},"7":{start:{line:19,column:13},end:{line:19,column:26}},"8":{start:{line:22,column:2},end:{line:43,column:3}},"9":{start:{line:23,column:4},end:{line:37,column:5}},"10":{start:{line:24,column:24},end:{line:24,column:42}},"11":{start:{line:25,column:6},end:{line:31,column:7}},"12":{start:{line:26,column:8},end:{line:26,column:27}},"13":{start:{line:28,column:8},end:{line:30,column:58}},"14":{start:{line:47,column:0},end:{line:68,column:2}},"15":{start:{line:48,column:18},end:{line:48,column:26}},"16":{start:{line:51,column:2},end:{line:67,column:3}},"17":{start:{line:52,column:4},end:{line:62,column:5}},"18":{start:{line:53,column:19},end:{line:53,column:42}},"19":{start:{line:54,column:6},end:{line:57,column:19}},"20":{start:{line:59,column:6},end:{line:61,column:37}},"21":{start:{line:71,column:0},end:{line:100,column:2}},"22":{start:{line:72,column:13},end:{line:72,column:26}},"23":{start:{line:73,column:28},end:{line:73,column:36}},"24":{start:{line:76,column:2},end:{line:99,column:3}},"25":{start:{line:77,column:4},end:{line:94,column:5}},"26":{start:{line:78,column:22},end:{line:78,column:62}},"27":{start:{line:79,column:6},end:{line:81,column:22}},"28":{start:{line:85,column:6},end:{line:93,column:7}},"29":{start:{line:86,column:8},end:{line:88,column:58}},"30":{start:{line:90,column:8},end:{line:92,column:47}},"31":{start:{line:103,column:0},end:{line:131,column:2}},"32":{start:{line:104,column:13},end:{line:104,column:26}},"33":{start:{line:107,column:2},end:{line:130,column:3}},"34":{start:{line:108,column:4},end:{line:125,column:5}},"35":{start:{line:109,column:6},end:{line:109,column:27}},"36":{start:{line:110,column:6},end:{line:113,column:14}},"37":{start:{line:116,column:6},end:{line:124,column:7}},"38":{start:{line:117,column:8},end:{line:119,column:58}},"39":{start:{line:134,column:0},end:{line:136,column:2}},"40":{start:{line:135,column:2},end:{line:135,column:31}},"41":{start:{line:139,column:0},end:{line:142,column:1}},"42":{start:{line:140,column:2},end:{line:140,column:20}},"43":{start:{line:141,column:2},end:{line:141,column:15}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:7,column:11},end:{line:7,column:12}},loc:{start:{line:7,column:31},end:{line:15,column:1}},line:7},"1":{name:"(anonymous_1)",decl:{start:{line:18,column:19},end:{line:18,column:20}},loc:{start:{line:18,column:45},end:{line:44,column:1}},line:18},"2":{name:"(anonymous_2)",decl:{start:{line:47,column:17},end:{line:47,column:18}},loc:{start:{line:47,column:43},end:{line:68,column:1}},line:47},"3":{name:"(anonymous_3)",decl:{start:{line:71,column:21},end:{line:71,column:22}},loc:{start:{line:71,column:47},end:{line:100,column:1}},line:71},"4":{name:"(anonymous_4)",decl:{start:{line:103,column:22},end:{line:103,column:23}},loc:{start:{line:103,column:48},end:{line:131,column:1}},line:103},"5":{name:"(anonymous_5)",decl:{start:{line:134,column:16},end:{line:134,column:17}},loc:{start:{line:134,column:42},end:{line:136,column:1}},line:134},"6":{name:"(anonymous_6)",decl:{start:{line:139,column:17},end:{line:139,column:18}},loc:{start:{line:139,column:28},end:{line:142,column:1}},line:139}},branchMap:{"0":{loc:{start:{line:9,column:2},end:{line:13,column:3}},type:"if",locations:[{start:{line:9,column:2},end:{line:13,column:3}}],line:9},"1":{loc:{start:{line:22,column:2},end:{line:43,column:3}},type:"if",locations:[{start:{line:22,column:2},end:{line:43,column:3}}],line:22},"2":{loc:{start:{line:25,column:6},end:{line:31,column:7}},type:"if",locations:[{start:{line:25,column:6},end:{line:31,column:7}},{start:{line:25,column:6},end:{line:31,column:7}}],line:25},"3":{loc:{start:{line:51,column:2},end:{line:67,column:3}},type:"if",locations:[{start:{line:51,column:2},end:{line:67,column:3}}],line:51},"4":{loc:{start:{line:76,column:2},end:{line:99,column:3}},type:"if",locations:[{start:{line:76,column:2},end:{line:99,column:3}}],line:76},"5":{loc:{start:{line:76,column:6},end:{line:76,column:29}},type:"binary-expr",locations:[{start:{line:76,column:6},end:{line:76,column:8}},{start:{line:76,column:12},end:{line:76,column:29}}],line:76},"6":{loc:{start:{line:85,column:6},end:{line:93,column:7}},type:"if",locations:[{start:{line:85,column:6},end:{line:93,column:7}},{start:{line:85,column:6},end:{line:93,column:7}}],line:85},"7":{loc:{start:{line:107,column:2},end:{line:130,column:3}},type:"if",locations:[{start:{line:107,column:2},end:{line:130,column:3}}],line:107},"8":{loc:{start:{line:116,column:6},end:{line:124,column:7}},type:"if",locations:[{start:{line:116,column:6},end:{line:124,column:7}}],line:116}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0},b:{"0":[0],"1":[0],"2":[0,0],"3":[0],"4":[0],"5":[0,0],"6":[0,0],"7":[0],"8":[0]},_coverageSchema:"43e27e138ebf9cfc5966b082cf9a028302ed4184"};var coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}coverageData.hash=hash;return coverage[path]=coverageData;}();const express=(cov_eio3rtosq.s[0]++,require('express'));const router=(cov_eio3rtosq.s[1]++,express.Router());let usersModel=(cov_eio3rtosq.s[2]++,undefined);/* Control usermodel initialisation */cov_eio3rtosq.s[3]++;router.use((req,res,next)=>{cov_eio3rtosq.f[0]++;cov_eio3rtosq.s[4]++;/* istanbul ignore if */if(!usersModel){res.status(500).json({message:'model not initialised'});}else{cov_eio3rtosq.b[0][0]++;}cov_eio3rtosq.s[5]++;next();});/* GET a specific user by id */cov_eio3rtosq.s[6]++;router.get('/:id',function(req,res,next){cov_eio3rtosq.f[1]++;const id=(cov_eio3rtosq.s[7]++,req.params.id);/* istanbul ignore else */cov_eio3rtosq.s[8]++;if(id){cov_eio3rtosq.b[1][0]++;cov_eio3rtosq.s[9]++;try{const userFound=(cov_eio3rtosq.s[10]++,usersModel.get(id));cov_eio3rtosq.s[11]++;if(userFound){cov_eio3rtosq.b[2][0]++;cov_eio3rtosq.s[12]++;res.json(userFound);}else{cov_eio3rtosq.b[2][1]++;cov_eio3rtosq.s[13]++;res.status(404).json({message:`User not found with id ${id}`});}}catch(exc){/* istanbul ignore next */res.status(400).json({message:exc.message});}}else{res.status(400).json({message:'Wrong parameter'});}});/* Add a new user. */cov_eio3rtosq.s[14]++;router.post('/',function(req,res,next){cov_eio3rtosq.f[2]++;const newUser=(cov_eio3rtosq.s[15]++,req.body);/* istanbul ignore else */cov_eio3rtosq.s[16]++;if(newUser){cov_eio3rtosq.b[3][0]++;cov_eio3rtosq.s[17]++;try{const user=(cov_eio3rtosq.s[18]++,usersModel.add(newUser));cov_eio3rtosq.s[19]++;req.res.status(201).send(user);}catch(exc){cov_eio3rtosq.s[20]++;res.status(400).json({message:exc.message});}}else{res.status(400).json({message:'Wrong parameters'});}});/* Update a specific user */cov_eio3rtosq.s[21]++;router.patch('/:id',function(req,res,next){cov_eio3rtosq.f[3]++;const id=(cov_eio3rtosq.s[22]++,req.params.id);const newUserProperties=(cov_eio3rtosq.s[23]++,req.body);/* istanbul ignore else */cov_eio3rtosq.s[24]++;if((cov_eio3rtosq.b[5][0]++,id)&&(cov_eio3rtosq.b[5][1]++,newUserProperties)){cov_eio3rtosq.b[4][0]++;cov_eio3rtosq.s[25]++;try{const updated=(cov_eio3rtosq.s[26]++,usersModel.update(id,newUserProperties));cov_eio3rtosq.s[27]++;res.status(200).json(updated);}catch(exc){cov_eio3rtosq.s[28]++;if(exc.message==='user.not.found'){cov_eio3rtosq.b[6][0]++;cov_eio3rtosq.s[29]++;res.status(404).json({message:`User not found with id ${id}`});}else{cov_eio3rtosq.b[6][1]++;cov_eio3rtosq.s[30]++;res.status(400).json({message:'Invalid user data'});}}}else{res.status(400).json({message:'Wrong parameters'});}});/* REMOVE a specific user by id */cov_eio3rtosq.s[31]++;router.delete('/:id',function(req,res,next){cov_eio3rtosq.f[4]++;const id=(cov_eio3rtosq.s[32]++,req.params.id);/* istanbul ignore else */cov_eio3rtosq.s[33]++;if(id){cov_eio3rtosq.b[7][0]++;cov_eio3rtosq.s[34]++;try{cov_eio3rtosq.s[35]++;usersModel.remove(id);cov_eio3rtosq.s[36]++;req.res.status(200).end();}catch(exc){cov_eio3rtosq.s[37]++;/* istanbul ignore else */if(exc.message==='user.not.found'){cov_eio3rtosq.b[8][0]++;cov_eio3rtosq.s[38]++;res.status(404).json({message:`User not found with id ${id}`});}else{res.status(400).json({message:exc.message});}}}else{res.status(400).json({message:'Wrong parameter'});}});/* GET all users */cov_eio3rtosq.s[39]++;router.get('/',function(req,res,next){cov_eio3rtosq.f[5]++;cov_eio3rtosq.s[40]++;res.json(usersModel.getAll());});/** return a closure to initialize model */cov_eio3rtosq.s[41]++;module.exports=model=>{cov_eio3rtosq.f[6]++;cov_eio3rtosq.s[42]++;usersModel=model;cov_eio3rtosq.s[43]++;return router;};